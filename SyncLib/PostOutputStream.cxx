/*
 * SyncLib/PostOutputStream.cxx
 * Copyright(c) 1999, SyncIt.com  Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * -----------------
 * This program is GPL'd.  If you distribute this program or a derivative of
 * this program publicly you must include the source code.  It is easy
 * enough to drop me an email requesting a different license, if necessary.
 *
 * Author:            Terence Way
 * Last Modification: 2 Jan 1999
 *
 * Description:
 *    The PostOutputStream class defines an object that
 *    can maintain a rather large (0..100K bytes) in-memory
 *    text file to be submitted as an HTTP POST request.
 *    Characters are encoded as per the
 *    application/x-www-form-urlencoded MIME-type.
 */

#include <stdlib.h>
#include <ctype.h>

#include "PostOutputStream.h"

#include "util.h"

using namespace syncit;

static const char HEX[] = { '0', '1', '2', '3', '4', '5', '6', '7',
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

void PostOutputStream::nextVariable(const char *pszName) {
   if (getContentLength() > 0) {
      ByteArrayOutputStream::write('&');
   }

   ByteArrayOutputStream::write(pszName, lstrlenA(pszName));
   ByteArrayOutputStream::write('=');
}

/** generated by maketbl.c */
static const char URL_ENCODING[] = {
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '+', '%', '%', '%', '%', '%', '%', '%', '%', '%', '*', '%', '%', '-', '.', '%',
   '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '%', '%', '%', '%', '%', '%',
   '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
   'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '%', '%', '%', '%', '_',
   '%', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
   'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%',
   '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%'
};

void PostOutputStream::write(const char *pbBuffer, size_t cbBuffer) {
   for (size_t i = 0; i < cbBuffer; i++) {
      int  b = pbBuffer[i] & 0xFF;
      char c = URL_ENCODING[b];

      ByteArrayOutputStream::write(c);

      if (c == '%') {
         ByteArrayOutputStream::write(HEX[(b & 0xF0) >> 4]);
         ByteArrayOutputStream::write(HEX[b & 0x0F]);
      }
   }
}
